@page "/app/my-links"
@using BlazorUrl.Client.Dtos
@using BlazorUrl.Client.Extensions
@using BlazorUrl.Client.Interfaces
@using BlazorUrl.Client.Layout
@using BlazorUrl.Client.SharedComponents
@using Microsoft.AspNetCore.Components.QuickGrid
@using Microsoft.AspNetCore.Components.Sections

@rendermode @(new InteractiveAutoRenderMode(false))

@layout InteractiveMainLayout

@inject ILinkService linkService
@inject NavigationManager navigationManager
@inject IJSRuntime JSRuntime

<PageTitle>My Links</PageTitle>


<SectionContent SectionName="client-heading">
    <h1 class="text-main fw-bold text-center">My Links</h1>
</SectionContent>

<div class="row mt-3">
    <div class="col-12 d-flex justify-content-between align-items-center">
        <h3>@(_showActiveOnly ? "Active" : "All") Links</h3>
        @* <a href="@ShowButtonLinkUrl" class="btn btn-sm btn-outline-primary">Show @(ShowActiveOnly ? "All" : "Active") Links</a> *@
        <button type="button" @onclick="ToggleActiveOnly" class="btn btn-sm btn-outline-primary">Show @(_showActiveOnly ? "All" : "Active") Links</button>
    </div>
    <hr />
</div>

@if (_showToast)
{
    <Toast Text="Link Copied!" OnClose="() => _showToast = false" TimeoutInMilliseconds="500" />
}

@if (_isLoading)
{
    <Loader />
}
else
{
    <div class="row">
        <QuickGrid ItemsProvider="_linksProvider" Pagination="_paginationState" @ref="_grid">
            <TemplateColumn>
                <div class="p-2 mb-4 border-bottom shadow">
                    <div class="row">
                        <div class="col-sm-6 d-flex">
                            <div class="h3 d-flex flex-column justify-items-center">
                                <i class="bx bx-link"></i>
                                @if (context.IsActive)
                                {
                                    <i class="bx bx-check text-success fw-bold" title="Active"></i>
                                }
                                else
                                {
                                    <i class="bx bx-x text-danger fw-bold" title="Inactive"></i>
                                }
                            </div>
                            <div class="vr mx-3"></div>
                            <div class="flex-grow-1">
                                <h5>
                                    <a href="@context.ShortUrl" target="_blank" class="link-dark" title="@context.ShortUrl">@context.ShortUrl</a>
                                    <button type="button" class="btn btn-sm btn-default ms-1" @onclick="() => CopyLinkAsync(context.ShortUrl)">
                                        <i class="bx bx-copy"></i>
                                    </button>
                                </h5>
                                <small class="d-flex">
                                    <span>Long Url: <a href="@context.LongUrl" target="_blank" class="link-dark" title="@context.LongUrl">@context.LongUrl</a></span>
                                    <button type="button" class="btn btn-sm btn-default ms-1" @onclick="() => CopyLinkAsync(context.LongUrl)">
                                        <i class="bx bx-copy"></i>
                                    </button>
                                </small>
                            </div>
                        </div>
                        <div class="col-sm-3">
                            <h5> Total Clicks: @context.TotalClicks</h5>
                            <a href="/app/my-links/@context.Id" class="btn btn-sm btn-main">
                                <i class="bx bx-chart me-1"></i>    <span>View Details</span>
                            </a>
                        </div>
                        <div class="col-sm-3 d-flex flex-column justify-content-center align-items-center gap-2">
                            <button type="button" class="btn btn-sm btn-outline-dark" @onclick="() => _editLink = context">
                                <i class="bx bx-edit me-1"></i> <span>Edit</span>
                            </button>
                            <button type="button" class="btn btn-sm btn-outline-danger">
                                <i class="bx bx-trash me-1"></i> <span>Delete</span>
                            </button>
                        </div>
                    </div>
                </div>
            </TemplateColumn>
        </QuickGrid>
        <Paginator State="_paginationState" />


    </div>
}


@if (_editLink is not null)
{
    <EditLinkModal Link="_editLink" OnClose="() => _editLink = null" UserId="@_userId" OnSave="OnLinkSave" />
}

@code {

    private bool _isLoading = false;

    private bool _showToast;

    [CascadingParameter]
    public Task<AuthenticationState> AuthStateTask { get; set; }

    // [SupplyParameterFromQuery(Name = "show")]
    // private string? Show { get; set; } = ShowType.ActiveOnly.ToString();
    // private bool ShowActiveOnly => string.IsNullOrWhiteSpace(Show) || Show == ShowType.ActiveOnly.ToString();

    // private string ShowButtonLinkUrl => ShowActiveOnly ? $"/app/my-links?show={ShowType.All}" : $"/app/my-links?show={ShowType.ActiveOnly}";

    private bool _showActiveOnly = true;

    private GridItemsProvider<LinkDto>? _linksProvider;
    private const int PageSize = 5;
    private PaginationState _paginationState = new()
        {
            ItemsPerPage = PageSize
        };

    private LinkDto? _editLink = null;

    private string _userId;

    private QuickGrid<LinkDto>? _grid;
    protected override async void OnInitialized()
    {
        var authState = await AuthStateTask;
        _userId = authState.User.GetUserId()!;

        _linksProvider = async request =>
        {
            var (links, count) = await linkService.GetLinksByUserAsync(_userId, request.StartIndex, request.Count ?? PageSize, _showActiveOnly);
            return GridItemsProviderResult.From(links, count);
        };
    }

    // protected override async Task OnParametersSetAsync()
    // {
    //     _isLoading = true;
    //     if (_grid is not null)
    //     {
    //         await _grid.RefreshDataAsync();
    //     }
    //     _isLoading = false;
    // }

    private async Task CopyLinkAsync(string linkUrl)
    {
        await JSRuntime.InvokeVoidAsync("window.copyToClipboard", linkUrl);
        _showToast = true;
    }

    private async Task ToggleActiveOnly()
    {
        _showActiveOnly = !_showActiveOnly;
        _isLoading = true;
        if (_grid is not null)
        {
            await _grid.RefreshDataAsync();
        }
        _isLoading = false;
    }

    private async Task OnLinkSave(LinkDto updatedLink)
    {
        //_editLink!.LongUrl = updatedLink.LongUrl;

        if (_editLink.IsActive && !updatedLink.IsActive)
        {
            if (_showActiveOnly)
            {
                await _grid!.RefreshDataAsync();
            }
        }

        //_editLink!.IsActive = updatedLink.IsActive;

        _editLink = null;
    }

    enum ShowType
    {
        All,
        ActiveOnly
    }

}
